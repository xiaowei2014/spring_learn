<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	                    http://www.springframework.org/schema/util http://www.springframework.org/schema/spring-util-4.2.xsd
	                    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">


    <context:annotation-config/>

    <context:component-scan base-package="my.learn.spring">
        <!--将Controller的注解排除掉 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>


    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath:db.properties</value>-->
                <!--<value>classpath:config.properties</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<import resource="dao/mysql-datasource.xml"/>-->

    <!--<bean id="upmAuthService" class="com.sankuai.meituan.upm.tools.UpmAuthService">-->
        <!--<property name="clientId" value="tower"/>-->
        <!--<property name="secret" value="509c7376942fec97db03050ea3f66b85"/>-->
    <!--</bean>-->
    <!--<bean id="mtFilter" class="com.sankuai.meituan.filter.spring.FilterFactoryBean">-->
        <!--<property name="appkey" value="tower" />-->
        <!--<property name="loginUrl" value="https://sso.sankuai.com"/>-->
        <!--<property name="loginApiUrl" value="http://api.sso-in.sankuai.com"/>-->
        <!--<property name="authUrl" value="http://api.upm-in.sankuai.com"/>-->
        <!--<property name="callbackUri" value="/mt-sso" />-->
        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--/page/** = anon-->
            <!--</value>-->
        <!--</property>-->
    <!--</bean>-->


    <!--<mvc:annotation-driven/>-->
    <!--<mvc:interceptors>-->
        <!--&lt;!&ndash; 加入TraceHandlerInterceptor &ndash;&gt;-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**"/> &lt;!&ndash; 想加入mtrace的url &ndash;&gt;-->
            <!--<bean class="com.meituan.mtrace.http.TraceHandlerInterceptor"/>-->
        <!--</mvc:interceptor>-->
        <!--&lt;!&ndash; 其它配置 &ndash;&gt;-->
    <!--</mvc:interceptors>-->


    <!--<bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">-->
        <!--<property name="prefix" value="vm"/>-->
        <!--<property name="suffix" value="vm"/>-->
    <!--</bean>-->
    <!--p:interceptorNames="greetingBeforeAdvice,greetingAfterAdvice"-->

    <!--lifecycle -->
    <bean id="applicationContextExample" class="my.learn.spring.beanfactory.ApplicationContextExample"/>
    <bean id="beanLifeCycle" class="my.learn.spring.beanlifecycle.BeanLifeCycle" init-method="myInit" destroy-method="myDestroy" scope="singleton" />

    <!--aop -->
    <bean id="greetingBeforeAdvice" class="my.learn.spring.aop.advice.GreetingBeforeAdvice"/>
    <bean id="greetingAfterAdvice" class="my.learn.spring.aop.advice.GreetingAfterAdvice"/>
    <bean id="greetingAround" class="my.learn.spring.aop.advice.GreetingAround"/>
    <bean id="greetingThrowsAdvice" class="my.learn.spring.aop.advice.GreetingThrowsAdvice"/>
    <bean id="performanceMonitor" class="my.learn.spring.aop.advice.ControllablePerformanceMonitor"/>
    <bean id="naiveWaiter" class="my.learn.spring.aop.advice.NaiveWaiter"/>
    <bean id="waiterProxy" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:proxyInterfaces="my.learn.spring.aop.advice.Waiter,my.learn.spring.aop.monitor.Monitorable"
          p:target-ref="naiveWaiter"
            p:proxyTargetClass="true">
        <property name="interceptorNames">
            <list>
                <idref bean ="greetingBeforeAdvice"/>
                <idref bean="greetingAfterAdvice"/>
                <idref bean="greetingAround"/>
                <idref bean="greetingThrowsAdvice"/>
                <idref bean="performanceMonitor"/>
            </list>
        </property>
    </bean>

    <!--advisor -->
    <bean id="waiterTarget" class="my.learn.spring.aop.advisor.Waiter"/>
    <bean id="sellerTarget" class="my.learn.spring.aop.advisor.Seller"/>
    <bean id="methodBeforeAdviceExample" class="my.learn.spring.aop.advisor.MethodBeforeAdviceExample"/>
    <!-- StaticMethodMatcherPointcutAdvisor-->
    <bean id="staticMethodMatcherPointcutAdvisorExample" class="my.learn.spring.aop.advisor.StaticMethodMatcherPointcutAdvisorExample" p:advice-ref="methodBeforeAdviceExample"/>
    <bean id="parent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="staticMethodMatcherPointcutAdvisorExample"
          p:proxyTargetClass="true"/>
    <bean id="waiter" parent="parent" p:target-ref="waiterTarget"/>
    <bean id="seller" parent="parent" p:target-ref="sellerTarget"/>

    <!--RegexpMethodPointcutAdvisor -->
    <bean id="regexpMethodPointcutAdvisorExample" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"
          p:advice-ref="methodBeforeAdviceExample">
        <property name="patterns">
            <list>
                <value>.*greet.*</value>
            </list>
        </property>
    </bean>
    <bean id="waiter2" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="regexpMethodPointcutAdvisorExample"
          p:target-ref="waiterTarget"
          p:proxyTargetClass="true"/>

    <!--ControlFlowPointcutAdvisor -->
    <bean id="controlFlowPointcutExample" class="org.springframework.aop.support.ControlFlowPointcut">
        <constructor-arg type="java.lang.Class" value="my.learn.spring.aop.advisor.WaiterDelegate"/>
        <constructor-arg type="java.lang.String" value="service"/>
    </bean>
    <bean id="controlFlowPointcutAdvisorExample" class="org.springframework.aop.support.DefaultPointcutAdvisor"
          p:pointcut-ref="controlFlowPointcutExample"
          p:advice-ref="greetingBeforeAdvice"/>
    <bean id="waiter4" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="controlFlowPointcutAdvisorExample"
          p:target-ref="waiterTarget"
          p:proxyTargetClass="true"/>


    <!--ComposablePointcut -->
    <bean id="composablePointcutExample" class="my.learn.spring.aop.advisor.ComposablePointcutExample"/>
    <bean id="composablePointcutAdvisorExample" class="org.springframework.aop.support.DefaultPointcutAdvisor"
          p:pointcut="#{composablePointcutExample.intersectionPointcut}"
          p:advice-ref="greetingBeforeAdvice"/>
    <bean id="waiter5" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="composablePointcutAdvisorExample"
          p:target-ref="waiterTarget"
          p:proxyTargetClass="true"/>

    <!--DefaultIntroductionAdvisor -->
    <bean id="defaultIntroductionAdvisorExample" class="org.springframework.aop.support.DefaultIntroductionAdvisor">
        <constructor-arg>
            <bean class="my.learn.spring.aop.advice.ControllablePerformanceMonitor"/>
        </constructor-arg>
    </bean>
    <bean id="waiterProxy1" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="defaultIntroductionAdvisorExample"
          p:target-ref="naiveWaiter"
          p:proxyTargetClass="true"/>


</beans>

